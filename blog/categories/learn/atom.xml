<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learn | ezrasuki]]></title>
  <link href="http://ezrasuki.github.io/blog/categories/learn/atom.xml" rel="self"/>
  <link href="http://ezrasuki.github.io/"/>
  <updated>2013-10-07T04:47:10-04:00</updated>
  <id>http://ezrasuki.github.io/</id>
  <author>
    <name><![CDATA[Ezrasuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails 4]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/15/rails-4/"/>
    <updated>2013-09-15T16:47:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/15/rails-4</id>
    <content type="html"><![CDATA[<h1>puts vs. print</h1>

<ul>
<li><code>puts</code> : prints a string, followed by newline</li>
<li><code>print</code> : prints a string, no newline</li>
</ul>


<h1>Ruby help</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CGImage vs. CIImage vs. UIImage]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/cgimage-vs-ciimage-vs-uiimage/"/>
    <updated>2013-09-08T08:35:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/cgimage-vs-ciimage-vs-uiimage</id>
    <content type="html"><![CDATA[<h2>UIImage</h2>

<ul>
<li>From UIKit</li>
<li>a high level way of displaying image data.</li>
<li>Not mutable</li>
<li>Just displaying the image</li>
</ul>


<h2>CGImage</h2>

<ul>
<li>From Core Graphics</li>
<li>Can cut out areas of the image</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Octopress]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/getting-started-with-octopress/"/>
    <updated>2013-09-08T06:28:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/getting-started-with-octopress</id>
    <content type="html"><![CDATA[<p><img src="/images/octopress.jpg" alt="" /></p>

<h1>A. Setting up</h1>

<h2>1. Clone Octopress to local machine</h2>

<p>Clone the original octopress repo with the name I want for my blog. Running this will create an &ldquo;ezrasuki.github.io&rdquo; folder.</p>

<pre><code>git clone git://github.com/imathis/octopress.git ezrasuki.github.io
</code></pre>

<h2>2. Install Octopress</h2>

<pre><code>bundle install
rake install
</code></pre>

<h2>3. Configure Octopress</h2>

<p>Open <code>_config.yml</code> and edit some attributes I want to change.</p>

<pre><code>url: ezrasuki.github.io
title: .ezra.suki.
subtitle: Adventure of Ezrasuki
author: Ezrasuki
simple_search: http://google.com/search
description:
</code></pre>

<h1>B. Writing a post locally</h1>

<p>From the blog root directory (In my case, the ezrasuki.github.io folder I created by cloning), run this task:</p>

<pre><code>rake new_post["Hello World"]
</code></pre>

<p>It will create a .markdown file under <code>source/_posts</code>, with a name that looks like: <code>2013-09-07-hello-world.markdown</code>. Open and edit so it looks something like this:</p>

<pre><code>---
layout: post
title: "Hello World"
date: 2013-09-07 23:18
comments: true
categories: [Test, Helloworld]
---

This is the content. You can write in markdown.
</code></pre>

<p>Note that &ldquo;categories&rdquo; are basically tags.</p>

<h1>C. Preview blog</h1>

<p>When done, generate HTML from the markdown with:</p>

<pre><code>rake generate
</code></pre>

<p>To preview the post locally, run the following command, which will start a <a href="http://localhost:4000">http://localhost:4000</a> server you can visit.</p>

<pre><code>rake preview
</code></pre>

<h1>C. Deploy to Github</h1>

<p>There are many options for hosting, but I am hosting it on Github because it&rsquo;s free.</p>

<h2>1. Create a Github repo</h2>

<p>Create a repo with the name of your blog. It should look like this: <code>[your github username].github.io</code>. Mine is <code>ezrasuki.github.io</code></p>

<h2>2. Connect Octopress with the Github repo</h2>

<p>Octopress has a rake command which automatically takes care of all this. Run:</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>It will ask you the github repo url. Copy the clone URL from the Github repo and paste it here. It should look something like <code>https://github.com/ezrasuki/ezrasuki.github.io.git</code>.</p>

<h2>3. Deploy</h2>

<h3>A. Deploy generated blog files</h3>

<p>Finally, deploy all the local changes (including the new post) to Github pages repo by running:</p>

<pre><code>rake deploy
</code></pre>

<h3>B. Deploy source files</h3>

<p>This only deploys the master branch, which contains the generated blog content. You may also want to push the source branch. The source branch contains everything except for the generated blog files. This includes:
1. Octopress source code
2. Markdown files for posts</p>

<p>Therefore it is a good idea to commit these too, in order to keep track of this side as well. Run the following:</p>

<pre><code>git commit -am "Committing source"
git push origin source
</code></pre>

<p>Note that <code>git push origin master</code> has been already executed automatically when we ran <code>rake deploy</code> earlier. Again, that was for pushing the final static content. And this time, <code>git push origin source</code> is for pushing the source files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVFoundation Overview]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/avfoundation-overview/"/>
    <updated>2013-09-08T00:13:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/avfoundation-overview</id>
    <content type="html"><![CDATA[<h1>What is AVFoundation?</h1>

<ol>
<li>AVAsset</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Image Basics]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/07/core-image/"/>
    <updated>2013-09-07T23:56:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/07/core-image</id>
    <content type="html"><![CDATA[<p>Core Image provides a mechanism for <strong>filtering</strong> and <strong>manipulating</strong> images and videos. Think Instagram filter effects.</p>

<h1>Example filters</h1>

<ul>
<li>cropping</li>
<li>color effects</li>
<li>blurring</li>
<li>warping</li>
<li>transformations</li>
<li>gradients</li>
</ul>


<p>Take a <strong>CIImage</strong> and apply <strong>CIFilter</strong> to draw on <strong>CIContext</strong></p>

<p>Example</p>

<pre><code>// 1. Get a CIImage
CIImage *image = [CIImage imageWithContentsOfURL:myURL];

// 2. Create a CIFilter
CIFilter *filter = [CIFilter filterWithName:@"CISepiaTone"];

// 3. Apply the filter to the image
[filter setValue:image forKey:kCIInputImageKey];

// 4. More CIFilter customization
[filter setValue:[NSNumber numberWithFloat:0.8f] forKey:@"InputIntensity"];

// 5. Get the resulting image from CIFilter
CIImage *result = [filter valueForKey:kCIOutputImageKey];

// 6. Create CIContext
CIContext *context = [CIContext contextWithOptions:nil];

// 7. Finally, render CIImage onto Core Graphics Image, which then can be displayed or saved.
CGImageRef cgImage = [context createCGImage:result fromRect:[result extent];

// 8. Convert CGImage to UIImage, so we can draw it onto view
UIImage *resultUIImage = [UIImage imageWithCGImage: cgImage];

// 9. Get the CGRect to draw on
CGRect imageRect =[[UIScreen mainScreen] bounds];

// 10. Draw the UIImage onto the CGRect region
[resultUIImage drawInRect:imageRect];
</code></pre>
]]></content>
  </entry>
  
</feed>
