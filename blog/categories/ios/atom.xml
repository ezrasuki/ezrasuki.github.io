<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | ezrasuki]]></title>
  <link href="http://ezrasuki.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ezrasuki.github.io/"/>
  <updated>2013-09-08T20:18:46-04:00</updated>
  <id>http://ezrasuki.github.io/</id>
  <author>
    <name><![CDATA[Ezrasuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Opaque Types in Objective-c]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/opaque-types-in-objective-c/"/>
    <updated>2013-09-08T18:05:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/opaque-types-in-objective-c</id>
    <content type="html"><![CDATA[<h1>What is an Opaque type?</h1>

<ul>
<li>a type that wraps lower-level types</li>
<li>used when

<ul>
<li>the underlying implementation is complex</li>
<li>the user does not need to know about the inner workings.</li>
</ul>
</li>
<li>The individual fields of an object based on an opaque type are hidden from clients, but the type’s functions offer access to most values of these fields</li>
</ul>


<h1>A. Opaque types in Core Foundation</h1>

<p>Core foundation has many &ldquo;opaque types'.</p>

<h2>What is Core Foundation?</h2>

<p>Core Foundation is a library with a set of programming interfaces conceptually derived from the Objective-C-based Foundation framework but implemented in the C language.</p>

<h3>1. Makes it possible for the different frameworks and libraries on OS X to share code and data.</h3>

<p>Applications, libraries, and frameworks can define C routines that incorporate Core Foundation types in their external interfaces; they can thus communicate data—as Core Foundation objects—to each other through these interfaces.</p>

<h3>2. Makes some degree of operating-system independence possible</h3>

<p>Some Core Foundation types and functions are abstractions of things that have specific implementations on different operating systems.</p>

<h3>3. Supports internationalization with Unicode strings</h3>

<p>Uses CFString, instances of which represent an array of 16-bit Unicode characters. Flexible enough to hold megabytes worth of characters and yet simple and low-level enough for use in all programming interfaces communicating character data</p>

<h2>Opaque type examples in Core Foundation</h2>

<ul>
<li>CFString: an opaque type that &ldquo;represents&rdquo; and operates on Unicode character arrays.</li>
<li>CFArray: an opaque type for indexed-based collection functionality.</li>
</ul>


<h1>B. Opaque types in Quartz2D</h1>

<ul>
<li>CGPathRef: vector graphics</li>
<li>CGImageRef: bitmap images</li>
<li>CGLayerRef: drawling layer that can be used for repeated drawing and offscreen drawing</li>
<li>CGPatternRef: repeated drawing using patterns</li>
<li>CGShadingRef: for gradients</li>
<li>CGGradientRef: for gradients</li>
<li>CGColorRef: used for colors in Quartz2D</li>
<li>CGImageSourceRef: move data into and out of Quartz</li>
<li>CGFontRef: to draw text</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing on iOS]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/drawing-on-ios/"/>
    <updated>2013-09-08T15:20:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/drawing-on-ios</id>
    <content type="html"><![CDATA[<h1>Quartz2D:</h1>

<ul>
<li>Two dimensional graphics drawing engine that makes up the bulk of the UIKit <strong>Core Graphics</strong> Framework.</li>
<li>C based API</li>
<li>Typically used on UIView object</li>
<li>Features

<ul>
<li>path-based drawing</li>
<li>painting with transparency</li>
<li>shading, drawing shadows</li>
<li>transparency layers</li>
<li>color management</li>
<li>anti-aliased rendering</li>
<li>PDF document generation</li>
<li>PDF metadata access</li>
</ul>
</li>
<li>Works with other technologies like

<ul>
<li>Core Animation</li>
<li>OpenGL ES</li>
<li>UIKit</li>
</ul>
</li>
</ul>


<p>  ## How Quartz2D works
  &ndash; Painter&rsquo;s model:</p>

<pre><code>- each successive drawing operation applies a layer of "paint" to an output "canvas"
- the drawing can be modified by overlaying more paint
</code></pre>

<ul>
<li>The canvas can be:

<ul>
<li>PDF</li>
<li>Bitmap image</li>
<li>Printer</li>
</ul>
</li>
</ul>


<p>  ## Graphics context (the &ldquo;canvas&rdquo;)
  CGContextRef is the drawing destination. It can be: Window, Layer, Bitmap, PDF, Printer, etc.
  &ndash; No need to perform device-specific calculations. Quartz takes care of it.</p>

<pre><code>### Type of contexts
1. Bitmap graphics context: rectangular array (or raster) of pixels
2. PDF graphics context
  - PDF files, unlike bitmaps, may contain more than one page.
  - Drawing a page from a PDF file on a different device results in the image being optimized for the display characteristics of that device.
3. Window graphics context
4. Layer context: `CGLayerRef` is an offscreen drawing destination associated with another graphics context.
5. PostScript graphics context: for printing
</code></pre>

<p>  ## Graphics state</p>

<pre><code>### What is a Graphic state?
  - color
  - line width
  - current position
  - text font size 

### Graphics context maintains a stack of Graphic states
When context is created, the stack is empty. When i save a context, the current state is pushed to the stack
- `CGContextSaveGState` pushes the current context onto stack
- `CGContextRestoreGState` pops the stack to restore previous context
</code></pre>

<p>  ## Quartz2D Coordinate systems</p>

<pre><code>### How Quartz2D achieves Device independent representation
uses a separate coordinate system (`user space`), mapping it to the coordinate system of the output device (`device space`), using the current transformation matrix (CTM).
- CTM: affine transform matrix
  - maps points by applying translation (move), rotation (rotate), and scaling (resize) operations.
  - to draw a box 45 degrees rotated, rotate CTM first and then draw inside the box.

### (x,y) point representation

![Quartz2D coordinate system](https://developer.apple.com/library/ios/DOCUMENTATION/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/quartz_coordinates.gif)

- Origin (0,0): bottom-left corner.    
  - This is different from some other drawing coordinate systems
    - UIView: top-left corner is (0,0)
      - to switch, apply a transform that translates the origin to the upper-left corner of the PDF context and scales the y-coordinate by -1.
      - However, if you use a UIImage object to wrap a CGImage object you create, no need to modify the CTM.

![Modifying the coordinate system](https://developer.apple.com/library/ios/DOCUMENTATION/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/flipped_coordinates.jpg)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CGImage vs. CIImage vs. UIImage]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/cgimage-vs-ciimage-vs-uiimage/"/>
    <updated>2013-09-08T08:35:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/cgimage-vs-ciimage-vs-uiimage</id>
    <content type="html"><![CDATA[<h2>UIImage</h2>

<ul>
<li>From UIKit</li>
<li>a high level way of displaying image data.</li>
<li>Not mutable</li>
<li>Just displaying the image</li>
</ul>


<h2>CGImage</h2>

<ul>
<li>From Core Graphics</li>
<li>Can cut out areas of the image</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVFoundation Overview]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/avfoundation-overview/"/>
    <updated>2013-09-08T00:13:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/avfoundation-overview</id>
    <content type="html"><![CDATA[<ol>
<li>AVAsset</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Image Basics]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/07/core-image/"/>
    <updated>2013-09-07T23:56:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/07/core-image</id>
    <content type="html"><![CDATA[<p>Take a <strong>CIImage</strong> and apply <strong>CIFilter</strong> to draw on <strong>CIContext</strong></p>

<p>Example</p>

<pre><code>// 1. Create CIContext
CIContext *context = [CIContext contextWithOptions:nil];

// 2. Get a CIImage
CIImage *image = [CIImage imageWithContentsOfURL:myURL];

// 3. Create a CIFilter
CIFilter *filter = [CIFilter filterWithName:@"CISepiaTone"];

// 4. Apply the filter to the image
[filter setValue:image forKey:kCIInputImageKey];

// 5. More CIFilter customization
[filter setValue:[NSNumber numberWithFloat:0.8f] forKey:@"InputIntensity"];

// 6. Get the resulting image from CIFilter
CIImage *result = [filter valueForKey:kCIOutputImageKey];

// 7. Finally, render CIImage onto Core Graphics Image, which then can be displayed or saved.
CGImageRef cgImage = [context createCGImage:result fromRect:[result extent];
</code></pre>
]]></content>
  </entry>
  
</feed>
