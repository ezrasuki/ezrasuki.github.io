<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | ezrasuki]]></title>
  <link href="http://ezrasuki.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ezrasuki.github.io/"/>
  <updated>2013-09-11T21:35:45-04:00</updated>
  <id>http://ezrasuki.github.io/</id>
  <author>
    <name><![CDATA[Ezrasuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CMTime: How time is represented in AVFoundation]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/11/cmtime-how-time-is-represented-in-avfoundation/"/>
    <updated>2013-09-11T00:02:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/11/cmtime-how-time-is-represented-in-avfoundation</id>
    <content type="html"><![CDATA[<h1>CMTime</h1>

<h2>How is CMTime structured?</h2>

<p>CMTime is a C structure that represents time using</p>

<ol>
<li>Numerator (int64_t)</li>
<li>Denominator (int32_t)</li>
</ol>


<p>Example</p>

<pre><code>// time1 and time2 both represent 100 seconds, but using different timescales.
CMTime time1 = CMTimeMake(200, 2); // 200 half-seconds
CMTime time2 = CMTimeMake(400, 4); // 400 quarter-seconds
</code></pre>

<h2>Special CMTime constants</h2>

<ul>
<li><code>kCMTimeZero</code></li>
<li><code>kCMTimeInvalid</code></li>
<li><code>kCMTimePositiveInfinity</code></li>
<li><code>kCMTimeNegativeInfinity</code></li>
</ul>


<h2>Special CMTime constant testers</h2>

<ul>
<li><code>CMTIME_IS_INVALID</code></li>
<li><code>CMTIME_IS_POSITIVE_INFINITY</code></li>
<li><p><code>CMTIME_IS_INDEFINITE</code></p>

<p>  CMTime myTime = CMTimeMake(200, 2);
  if (CMTIME_IS_INVALID(myTime)) {
    NSLog(@&ldquo;Error&rdquo;);
  }</p></li>
</ul>


<h1>CMTimeRange</h1>

<h2>How is CMTimeRange structured?</h2>

<ol>
<li> Start time (CMTime)</li>
<li> Duration (CMTime)</li>
</ol>


<p>Example</p>

<pre><code>CMTime time1 = CMTimeMake(200, 2);
CMTime time2 = CMTimeMake(400, 4);
CMTimeRange range = CMTimeRangeMake(time1, time2)
</code></pre>

<h2>Testing for inclusion</h2>

<pre><code>CMTimeRangeContainsTimeRange(range, CMTimeRangeGetEnd(range));
// This is false
</code></pre>

<h2>CMTimeRange special constants</h2>

<ul>
<li><code>kCMTimeRangeZero</code></li>
<li><code>kCMTimeRangeInvalid</code></li>
</ul>


<h2>CMTimeRange special constant testers</h2>

<ul>
<li><code>CMTIMERANGE_IS_VALID</code></li>
<li><code>CMTIMERANGE_IS_INVALID</code></li>
<li><code>CMTIMERANGE_IS_EMPTY</code></li>
<li><code>CMTIMERANGE_IS_EMPTY</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How is AVAsset structured?]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/10/how-is-avasset-structured/"/>
    <updated>2013-09-10T23:33:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/10/how-is-avasset-structured</id>
    <content type="html"><![CDATA[<h1>Types of AVAsset</h1>

<ol>
<li><code>AVComposition</code>: new media by composing multiple media</li>
<li><code>AVURLAsset</code>: media at a given URL</li>
</ol>


<p><img src="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/avassetHierarchy_2x.png" alt="Types of AVAsset" /></p>

<h1>AVAsset components</h1>

<ol>
<li><code>AVMetaDataItem</code>: metadata about the asset as a whole, such as duration, title, size, etc.</li>
<li><code>AVAssetTrack</code>: separate tracks that add up to the entire asset, such as video, audio, etc.</li>
<li><code>AVAssetTrack</code> in turn can be composed of <code>AVAssetTrackSegment</code>, which is a mapping from a source to the current track timeline.</li>
</ol>


<p><img src="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/avassetAndTracks_2x.png" alt="AVAsset components" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing with Core Graphics and Quartz2D]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/drawing-with-core-graphics-and-quartz2d/"/>
    <updated>2013-09-08T20:42:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/drawing-with-core-graphics-and-quartz2d</id>
    <content type="html"><![CDATA[<h1>Various Quartz2D inititalization</h1>

<h2>Get the current view&rsquo;s context</h2>

<p>Each view has its own drawing context. Let&rsquo;s first get the context.</p>

<pre><code>CGContextRef graphics_context = UIGraphicsGetCurrentContext();
</code></pre>

<h2>Generate color</h2>

<pre><code>// Create colorspace (In this case, RGB space)
CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();

// Set up RGB constant
CGFloat components[] = {0.0, 0.0, 1.0, 0.5};

// Create CGColorRef using the colorspace and the RGB variable from above
CGColorRef color = CGColorCreate(colorspace, components);

// When done with using the color, let it go
CGColorRelease (color);

// After done using the colorspace
CGColorSpaceRelease(colorspace);
</code></pre>

<h1>When do I use UIColor with CGColorRef?</h1>

<p>UIColor has lots of convenience methods such as:</p>

<pre><code>[UIColor redColor]
</code></pre>

<p>So instead of going through all the tedious RGB specification, we can just create a <code>[UIColor redColor]</code> and then convert it to CGColor, and then use it to set context</p>

<pre><code>CGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);
</code></pre>

<p>UIColor avoids the necessity to create colorspaces and components when working with colors.</p>

<h1>Let&rsquo;s actually do some drawing!</h1>

<h2>1. Create a UIView</h2>

<p>Just create a project with a UIView</p>

<h2>2. Modify drawRect:</h2>

<h3>Drawing lines</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Get context
    CGContextRef context = UIGraphicsGetCurrentContext();

    // From here, set the context's attributes

    // 2. Set Line Width
    CGContextSetLineWidth(context, 5.0);

    // 3. Set Stroke Color 
    CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();
    CGFloat components[] = {0.0, 0.0, 1.0, 1.0};
    CGColorRef color = CGColorCreate(colorspace, components);
    CGContextSetStrokeColorWithColor(context, color);

    // 4. Move context's point
    CGContextMoveToPoint(context, 0, 0);

    // 5. Draw line from point to another point
    CGContextAddLineToPoint(context, 150, 150);
    CGContextAddLineToPoint(context, 100, 200);
    CGContextAddLineToPoint(context, 50, 150);
    CGContextAddLineToPoint(context, 100, 100);

    // 6. Actually "stroke" to draw
    CGContextStrokePath(context);

    // 6. Memory release
    CGColorSpaceRelease(colorspace);
    CGColorRelease(color);
}
</code></pre>

<h3>Drawing rectangle</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Init
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 4.0);
    CGContextSetStrokeColorWithColor(context, [UIColor blueColor].CGColor);

    // 2. Create CGRect area
    CGRect rectangle = CGRectMake(60,170,200,80);

    // 3. Add rectangle region to the context
    CGContextAddRect(context, rectangle);

    // 4. Actually "stroke" to draw
    CGContextStrokePath(context);
}
</code></pre>

<h3>Drawing an ellipse</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Init
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 4.0);
    CGContextSetStrokeColorWithColor(context, [UIColor blueColor].CGColor);

    // 2. Create CGRect area
    CGRect rectangle = CGRectMake(60,170,200,80);

    // 3. Add ellipse inside the CGRect in context
    CGContextAddEllipseInRect(context, rectangle);

    // 4. Actually "stroke" to draw
    CGContextStrokePath(context);
}
</code></pre>

<h3>Drawing an arc</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 4.0);
    CGContextSetStrokeColorWithColor(context, [UIColor blueColor].CGColor);

    // 1. Set begin point
    CGContextMoveToPoint(context, 100, 100);

    // 2. add arc to context
    CGContextAddArcToPoint(context, 100,200, 300,200, 100);

    // 3. stroke the context
    CGContextStrokePath(context);
}
</code></pre>

<h3>Drawing an UIImage without scaling</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
  // 1. Get UIIMage
  UIImage *myImage = [UIImage imageNamed:@"img.jpg"];

  // 2. Start point is (0,0)
  CGPoint imagePoint = CGPointMake(0, 0);

  // 3. Just add the image at (0,0)
  [myImage drawAtPoint:imagePoint];
}
</code></pre>

<h3>Drawing an UIImage with scaling</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Get UIImage
    UIImage *myImage = [UIImage imageNamed:@"pumpkin.jpg"];

    // 2. Get CGRect dimension for the entire screen
    CGRect imageRect =[[UIScreen mainScreen] bounds];

    // 3. Draw inside the CGRect
    [myImage drawInRect:imageRect];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opaque Types in Objective-c]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/opaque-types-in-objective-c/"/>
    <updated>2013-09-08T18:05:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/opaque-types-in-objective-c</id>
    <content type="html"><![CDATA[<h1>What is an Opaque type?</h1>

<ul>
<li>a type that wraps lower-level types</li>
<li>used when

<ul>
<li>the underlying implementation is complex</li>
<li>the user does not need to know about the inner workings.</li>
</ul>
</li>
<li>The individual fields of an object based on an opaque type are hidden from clients, but the typeâ€™s functions offer access to most values of these fields</li>
</ul>


<h1>A. Opaque types in Core Foundation</h1>

<p>Core foundation has many &ldquo;opaque types'.</p>

<h2>What is Core Foundation?</h2>

<p>Core Foundation is a library with a set of programming interfaces conceptually derived from the Objective-C-based Foundation framework but implemented in the C language.</p>

<h3>1. Makes it possible for the different frameworks and libraries on OS X to share code and data.</h3>

<p>Applications, libraries, and frameworks can define C routines that incorporate Core Foundation types in their external interfaces; they can thus communicate dataâ€”as Core Foundation objectsâ€”to each other through these interfaces.</p>

<h3>2. Makes some degree of operating-system independence possible</h3>

<p>Some Core Foundation types and functions are abstractions of things that have specific implementations on different operating systems.</p>

<h3>3. Supports internationalization with Unicode strings</h3>

<p>Uses CFString, instances of which represent an array of 16-bit Unicode characters. Flexible enough to hold megabytes worth of characters and yet simple and low-level enough for use in all programming interfaces communicating character data</p>

<h2>Opaque type examples in Core Foundation</h2>

<ul>
<li>CFString: an opaque type that &ldquo;represents&rdquo; and operates on Unicode character arrays.</li>
<li>CFArray: an opaque type for indexed-based collection functionality.</li>
</ul>


<h1>B. Opaque types in Quartz2D</h1>

<ul>
<li>CGPathRef: vector graphics</li>
<li>CGImageRef: bitmap images</li>
<li>CGLayerRef: drawling layer that can be used for repeated drawing and offscreen drawing</li>
<li>CGPatternRef: repeated drawing using patterns</li>
<li>CGShadingRef: for gradients</li>
<li>CGGradientRef: for gradients</li>
<li>CGColorRef: used for colors in Quartz2D</li>
<li>CGImageSourceRef: move data into and out of Quartz</li>
<li>CGFontRef: to draw text</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing on iOS]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/drawing-on-ios/"/>
    <updated>2013-09-08T15:20:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/drawing-on-ios</id>
    <content type="html"><![CDATA[<h1>Quartz2D:</h1>

<ul>
<li>Two dimensional graphics drawing engine that makes up the bulk of the UIKit <strong>Core Graphics</strong> Framework.</li>
<li>C based API</li>
<li>Typically used on UIView object</li>
<li>Features

<ul>
<li>path-based drawing</li>
<li>painting with transparency</li>
<li>shading, drawing shadows</li>
<li>transparency layers</li>
<li>color management</li>
<li>anti-aliased rendering</li>
<li>PDF document generation</li>
<li>PDF metadata access</li>
</ul>
</li>
<li>Works with other technologies like

<ul>
<li>Core Animation</li>
<li>OpenGL ES</li>
<li>UIKit</li>
</ul>
</li>
</ul>


<h2>How Quartz2D works</h2>

<ul>
<li>Painter&rsquo;s model:

<ul>
<li>each successive drawing operation applies a layer of &ldquo;paint&rdquo; to an output &ldquo;canvas&rdquo;</li>
<li>the drawing can be modified by overlaying more paint</li>
</ul>
</li>
<li>The canvas can be:

<ul>
<li>PDF</li>
<li>Bitmap image</li>
<li>Printer</li>
</ul>
</li>
</ul>


<h2>Graphics context (the &ldquo;canvas&rdquo;)</h2>

<p>CGContextRef is the drawing destination. It can be: Window, Layer, Bitmap, PDF, Printer, etc.
&ndash; No need to perform device-specific calculations. Quartz takes care of it.</p>

<h3>Type of contexts</h3>

<ol>
<li>Bitmap graphics context: rectangular array (or raster) of pixels</li>
<li>PDF graphics context</li>
<li>PDF files, unlike bitmaps, may contain more than one page.</li>
<li>Drawing a page from a PDF file on a different device results in the image being optimized for the display characteristics of that device.</li>
<li>Window graphics context</li>
<li>Layer context: <code>CGLayerRef</code> is an offscreen drawing destination associated with another graphics context.</li>
<li>PostScript graphics context: for printing</li>
</ol>


<h2>Graphics state</h2>

<h3>What is a Graphic state?</h3>

<ul>
<li>color</li>
<li>line width</li>
<li>current position</li>
<li>text font size</li>
</ul>


<h3>Graphics context maintains a stack of Graphic states</h3>

<p>When context is created, the stack is empty. When i save a context, the current state is pushed to the stack
&ndash; <code>CGContextSaveGState</code> pushes the current context onto stack
&ndash; <code>CGContextRestoreGState</code> pops the stack to restore previous context</p>

<h2>Quartz2D Coordinate systems</h2>

<h3>How Quartz2D achieves Device independent representation</h3>

<p>uses a separate coordinate system (<code>user space</code>), mapping it to the coordinate system of the output device (<code>device space</code>), using the current transformation matrix (CTM).
&ndash; CTM: affine transform matrix
  &ndash; maps points by applying translation (move), rotation (rotate), and scaling (resize) operations.
  &ndash; to draw a box 45 degrees rotated, rotate CTM first and then draw inside the box.</p>

<h3>Origin (0,0) is bottom-left corner.</h3>

<p><img src="https://developer.apple.com/library/ios/DOCUMENTATION/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/quartz_coordinates.gif" alt="Quartz2D coordinate system" />
This is different from some other drawing coordinate systems
&ndash; UIView: top-left corner is (0,0)
  &ndash; to switch, apply a transform that translates the origin to the upper-left corner of the PDF context and scales the y-coordinate by -1.
  &ndash; However, if you use a UIImage object to wrap a CGImage object you create, no need to modify the CTM.</p>

<p><img src="https://developer.apple.com/library/ios/DOCUMENTATION/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/flipped_coordinates.jpg" alt="Modifying the coordinate system" /></p>
]]></content>
  </entry>
  
</feed>
