<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: avasset | ezrasuki]]></title>
  <link href="http://ezrasuki.github.io/blog/categories/avasset/atom.xml" rel="self"/>
  <link href="http://ezrasuki.github.io/"/>
  <updated>2013-09-11T21:35:45-04:00</updated>
  <id>http://ezrasuki.github.io/</id>
  <author>
    <name><![CDATA[Ezrasuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CMTime: How time is represented in AVFoundation]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/11/cmtime-how-time-is-represented-in-avfoundation/"/>
    <updated>2013-09-11T00:02:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/11/cmtime-how-time-is-represented-in-avfoundation</id>
    <content type="html"><![CDATA[<h1>CMTime</h1>

<h2>How is CMTime structured?</h2>

<p>CMTime is a C structure that represents time using</p>

<ol>
<li>Numerator (int64_t)</li>
<li>Denominator (int32_t)</li>
</ol>


<p>Example</p>

<pre><code>// time1 and time2 both represent 100 seconds, but using different timescales.
CMTime time1 = CMTimeMake(200, 2); // 200 half-seconds
CMTime time2 = CMTimeMake(400, 4); // 400 quarter-seconds
</code></pre>

<h2>Special CMTime constants</h2>

<ul>
<li><code>kCMTimeZero</code></li>
<li><code>kCMTimeInvalid</code></li>
<li><code>kCMTimePositiveInfinity</code></li>
<li><code>kCMTimeNegativeInfinity</code></li>
</ul>


<h2>Special CMTime constant testers</h2>

<ul>
<li><code>CMTIME_IS_INVALID</code></li>
<li><code>CMTIME_IS_POSITIVE_INFINITY</code></li>
<li><p><code>CMTIME_IS_INDEFINITE</code></p>

<p>  CMTime myTime = CMTimeMake(200, 2);
  if (CMTIME_IS_INVALID(myTime)) {
    NSLog(@&ldquo;Error&rdquo;);
  }</p></li>
</ul>


<h1>CMTimeRange</h1>

<h2>How is CMTimeRange structured?</h2>

<ol>
<li> Start time (CMTime)</li>
<li> Duration (CMTime)</li>
</ol>


<p>Example</p>

<pre><code>CMTime time1 = CMTimeMake(200, 2);
CMTime time2 = CMTimeMake(400, 4);
CMTimeRange range = CMTimeRangeMake(time1, time2)
</code></pre>

<h2>Testing for inclusion</h2>

<pre><code>CMTimeRangeContainsTimeRange(range, CMTimeRangeGetEnd(range));
// This is false
</code></pre>

<h2>CMTimeRange special constants</h2>

<ul>
<li><code>kCMTimeRangeZero</code></li>
<li><code>kCMTimeRangeInvalid</code></li>
</ul>


<h2>CMTimeRange special constant testers</h2>

<ul>
<li><code>CMTIMERANGE_IS_VALID</code></li>
<li><code>CMTIMERANGE_IS_INVALID</code></li>
<li><code>CMTIMERANGE_IS_EMPTY</code></li>
<li><code>CMTIMERANGE_IS_EMPTY</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How is AVAsset structured?]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/10/how-is-avasset-structured/"/>
    <updated>2013-09-10T23:33:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/10/how-is-avasset-structured</id>
    <content type="html"><![CDATA[<h1>Types of AVAsset</h1>

<ol>
<li><code>AVComposition</code>: new media by composing multiple media</li>
<li><code>AVURLAsset</code>: media at a given URL</li>
</ol>


<p><img src="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/avassetHierarchy_2x.png" alt="Types of AVAsset" /></p>

<h1>AVAsset components</h1>

<ol>
<li><code>AVMetaDataItem</code>: metadata about the asset as a whole, such as duration, title, size, etc.</li>
<li><code>AVAssetTrack</code>: separate tracks that add up to the entire asset, such as video, audio, etc.</li>
<li><code>AVAssetTrack</code> in turn can be composed of <code>AVAssetTrackSegment</code>, which is a mapping from a source to the current track timeline.</li>
</ol>


<p><img src="https://developer.apple.com/library/ios/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/avassetAndTracks_2x.png" alt="AVAsset components" /></p>
]]></content>
  </entry>
  
</feed>
