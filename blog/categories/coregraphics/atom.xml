<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coregraphics | ezrasuki]]></title>
  <link href="http://ezrasuki.github.io/blog/categories/coregraphics/atom.xml" rel="self"/>
  <link href="http://ezrasuki.github.io/"/>
  <updated>2013-09-09T04:07:55-04:00</updated>
  <id>http://ezrasuki.github.io/</id>
  <author>
    <name><![CDATA[Ezrasuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drawing with Core Graphics and Quartz2D]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/drawing-with-core-graphics-and-quartz2d/"/>
    <updated>2013-09-08T20:42:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/drawing-with-core-graphics-and-quartz2d</id>
    <content type="html"><![CDATA[<h1>Various Quartz2D inititalization</h1>

<h2>Get the current view&rsquo;s context</h2>

<p>Each view has its own drawing context. Let&rsquo;s first get the context.</p>

<pre><code>CGContextRef graphics_context = UIGraphicsGetCurrentContext();
</code></pre>

<h2>Generate color</h2>

<pre><code>// Create colorspace (In this case, RGB space)
CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();

// Set up RGB constant
CGFloat components[] = {0.0, 0.0, 1.0, 0.5};

// Create CGColorRef using the colorspace and the RGB variable from above
CGColorRef color = CGColorCreate(colorspace, components);

// When done with using the color, let it go
CGColorRelease (color);

// After done using the colorspace
CGColorSpaceRelease(colorspace);
</code></pre>

<h1>When do I use UIColor with CGColorRef?</h1>

<p>UIColor has lots of convenience methods such as:</p>

<pre><code>[UIColor redColor]
</code></pre>

<p>So instead of going through all the tedious RGB specification, we can just create a <code>[UIColor redColor]</code> and then convert it to CGColor, and then use it to set context</p>

<pre><code>CGContextSetStrokeColorWithColor(context, [UIColor redColor].CGColor);
</code></pre>

<p>UIColor avoids the necessity to create colorspaces and components when working with colors.</p>

<h1>Let&rsquo;s actually do some drawing!</h1>

<h2>1. Create a UIView</h2>

<p>Just create a project with a UIView</p>

<h2>2. Modify drawRect:</h2>

<h3>Drawing lines</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Get context
    CGContextRef context = UIGraphicsGetCurrentContext();

    // From here, set the context's attributes

    // 2. Set Line Width
    CGContextSetLineWidth(context, 5.0);

    // 3. Set Stroke Color 
    CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();
    CGFloat components[] = {0.0, 0.0, 1.0, 1.0};
    CGColorRef color = CGColorCreate(colorspace, components);
    CGContextSetStrokeColorWithColor(context, color);

    // 4. Move context's point
    CGContextMoveToPoint(context, 0, 0);

    // 5. Draw line from point to another point
    CGContextAddLineToPoint(context, 150, 150);
    CGContextAddLineToPoint(context, 100, 200);
    CGContextAddLineToPoint(context, 50, 150);
    CGContextAddLineToPoint(context, 100, 100);

    // 6. Actually "stroke" to draw
    CGContextStrokePath(context);

    // 6. Memory release
    CGColorSpaceRelease(colorspace);
    CGColorRelease(color);
}
</code></pre>

<h3>Drawing rectangle</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Init
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 4.0);
    CGContextSetStrokeColorWithColor(context, [UIColor blueColor].CGColor);

    // 2. Create CGRect area
    CGRect rectangle = CGRectMake(60,170,200,80);

    // 3. Add rectangle region to the context
    CGContextAddRect(context, rectangle);

    // 4. Actually "stroke" to draw
    CGContextStrokePath(context);
}
</code></pre>

<h3>Drawing an ellipse</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Init
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 4.0);
    CGContextSetStrokeColorWithColor(context, [UIColor blueColor].CGColor);

    // 2. Create CGRect area
    CGRect rectangle = CGRectMake(60,170,200,80);

    // 3. Add ellipse inside the CGRect in context
    CGContextAddEllipseInRect(context, rectangle);

    // 4. Actually "stroke" to draw
    CGContextStrokePath(context);
}
</code></pre>

<h3>Drawing an arc</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    CGContextRef context = UIGraphicsGetCurrentContext();
    CGContextSetLineWidth(context, 4.0);
    CGContextSetStrokeColorWithColor(context, [UIColor blueColor].CGColor);

    // 1. Set begin point
    CGContextMoveToPoint(context, 100, 100);

    // 2. add arc to context
    CGContextAddArcToPoint(context, 100,200, 300,200, 100);

    // 3. stroke the context
    CGContextStrokePath(context);
}
</code></pre>

<h3>Drawing an UIImage without scaling</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
  // 1. Get UIIMage
  UIImage *myImage = [UIImage imageNamed:@"img.jpg"];

  // 2. Start point is (0,0)
  CGPoint imagePoint = CGPointMake(0, 0);

  // 3. Just add the image at (0,0)
  [myImage drawAtPoint:imagePoint];
}
</code></pre>

<h3>Drawing an UIImage with scaling</h3>

<pre><code>- (void)drawRect:(CGRect)rect {
    // 1. Get UIImage
    UIImage *myImage = [UIImage imageNamed:@"pumpkin.jpg"];

    // 2. Get CGRect dimension for the entire screen
    CGRect imageRect =[[UIScreen mainScreen] bounds];

    // 3. Draw inside the CGRect
    [myImage drawInRect:imageRect];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing on iOS]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/drawing-on-ios/"/>
    <updated>2013-09-08T15:20:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/drawing-on-ios</id>
    <content type="html"><![CDATA[<h1>Quartz2D:</h1>

<ul>
<li>Two dimensional graphics drawing engine that makes up the bulk of the UIKit <strong>Core Graphics</strong> Framework.</li>
<li>C based API</li>
<li>Typically used on UIView object</li>
<li>Features

<ul>
<li>path-based drawing</li>
<li>painting with transparency</li>
<li>shading, drawing shadows</li>
<li>transparency layers</li>
<li>color management</li>
<li>anti-aliased rendering</li>
<li>PDF document generation</li>
<li>PDF metadata access</li>
</ul>
</li>
<li>Works with other technologies like

<ul>
<li>Core Animation</li>
<li>OpenGL ES</li>
<li>UIKit</li>
</ul>
</li>
</ul>


<h2>How Quartz2D works</h2>

<ul>
<li>Painter&rsquo;s model:

<ul>
<li>each successive drawing operation applies a layer of &ldquo;paint&rdquo; to an output &ldquo;canvas&rdquo;</li>
<li>the drawing can be modified by overlaying more paint</li>
</ul>
</li>
<li>The canvas can be:

<ul>
<li>PDF</li>
<li>Bitmap image</li>
<li>Printer</li>
</ul>
</li>
</ul>


<h2>Graphics context (the &ldquo;canvas&rdquo;)</h2>

<p>CGContextRef is the drawing destination. It can be: Window, Layer, Bitmap, PDF, Printer, etc.
&ndash; No need to perform device-specific calculations. Quartz takes care of it.</p>

<h3>Type of contexts</h3>

<ol>
<li>Bitmap graphics context: rectangular array (or raster) of pixels</li>
<li>PDF graphics context</li>
<li>PDF files, unlike bitmaps, may contain more than one page.</li>
<li>Drawing a page from a PDF file on a different device results in the image being optimized for the display characteristics of that device.</li>
<li>Window graphics context</li>
<li>Layer context: <code>CGLayerRef</code> is an offscreen drawing destination associated with another graphics context.</li>
<li>PostScript graphics context: for printing</li>
</ol>


<h2>Graphics state</h2>

<h3>What is a Graphic state?</h3>

<ul>
<li>color</li>
<li>line width</li>
<li>current position</li>
<li>text font size</li>
</ul>


<h3>Graphics context maintains a stack of Graphic states</h3>

<p>When context is created, the stack is empty. When i save a context, the current state is pushed to the stack
&ndash; <code>CGContextSaveGState</code> pushes the current context onto stack
&ndash; <code>CGContextRestoreGState</code> pops the stack to restore previous context</p>

<h2>Quartz2D Coordinate systems</h2>

<h3>How Quartz2D achieves Device independent representation</h3>

<p>uses a separate coordinate system (<code>user space</code>), mapping it to the coordinate system of the output device (<code>device space</code>), using the current transformation matrix (CTM).
&ndash; CTM: affine transform matrix
  &ndash; maps points by applying translation (move), rotation (rotate), and scaling (resize) operations.
  &ndash; to draw a box 45 degrees rotated, rotate CTM first and then draw inside the box.</p>

<h3>Origin (0,0) is bottom-left corner.</h3>

<p><img src="https://developer.apple.com/library/ios/DOCUMENTATION/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/quartz_coordinates.gif" alt="Quartz2D coordinate system" />
This is different from some other drawing coordinate systems
&ndash; UIView: top-left corner is (0,0)
  &ndash; to switch, apply a transform that translates the origin to the upper-left corner of the PDF context and scales the y-coordinate by -1.
  &ndash; However, if you use a UIImage object to wrap a CGImage object you create, no need to modify the CTM.</p>

<p><img src="https://developer.apple.com/library/ios/DOCUMENTATION/GraphicsImaging/Conceptual/drawingwithquartz2d/Art/flipped_coordinates.jpg" alt="Modifying the coordinate system" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CGImage vs. CIImage vs. UIImage]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/08/cgimage-vs-ciimage-vs-uiimage/"/>
    <updated>2013-09-08T08:35:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/08/cgimage-vs-ciimage-vs-uiimage</id>
    <content type="html"><![CDATA[<h2>UIImage</h2>

<ul>
<li>From UIKit</li>
<li>a high level way of displaying image data.</li>
<li>Not mutable</li>
<li>Just displaying the image</li>
</ul>


<h2>CGImage</h2>

<ul>
<li>From Core Graphics</li>
<li>Can cut out areas of the image</li>
</ul>

]]></content>
  </entry>
  
</feed>
