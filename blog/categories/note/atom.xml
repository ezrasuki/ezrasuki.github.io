<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: note | ezrasuki]]></title>
  <link href="http://ezrasuki.github.io/blog/categories/note/atom.xml" rel="self"/>
  <link href="http://ezrasuki.github.io/"/>
  <updated>2013-10-07T04:49:46-04:00</updated>
  <id>http://ezrasuki.github.io/</id>
  <author>
    <name><![CDATA[Ezrasuki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Image Basics]]></title>
    <link href="http://ezrasuki.github.io/blog/2013/09/07/core-image/"/>
    <updated>2013-09-07T23:56:00-04:00</updated>
    <id>http://ezrasuki.github.io/blog/2013/09/07/core-image</id>
    <content type="html"><![CDATA[<p>Core Image provides a mechanism for <strong>filtering</strong> and <strong>manipulating</strong> images and videos. Think Instagram filter effects.</p>

<h1>Example filters</h1>

<ul>
<li>cropping</li>
<li>color effects</li>
<li>blurring</li>
<li>warping</li>
<li>transformations</li>
<li>gradients</li>
</ul>


<p>Take a <strong>CIImage</strong> and apply <strong>CIFilter</strong> to draw on <strong>CIContext</strong></p>

<p>Example</p>

<pre><code>// 1. Get a CIImage
CIImage *image = [CIImage imageWithContentsOfURL:myURL];

// 2. Create a CIFilter
CIFilter *filter = [CIFilter filterWithName:@"CISepiaTone"];

// 3. Apply the filter to the image
[filter setValue:image forKey:kCIInputImageKey];

// 4. More CIFilter customization
[filter setValue:[NSNumber numberWithFloat:0.8f] forKey:@"InputIntensity"];

// 5. Get the resulting image from CIFilter
CIImage *result = [filter valueForKey:kCIOutputImageKey];

// 6. Create CIContext
CIContext *context = [CIContext contextWithOptions:nil];

// 7. Finally, render CIImage onto Core Graphics Image, which then can be displayed or saved.
CGImageRef cgImage = [context createCGImage:result fromRect:[result extent];

// 8. Convert CGImage to UIImage, so we can draw it onto view
UIImage *resultUIImage = [UIImage imageWithCGImage: cgImage];

// 9. Get the CGRect to draw on
CGRect imageRect =[[UIScreen mainScreen] bounds];

// 10. Draw the UIImage onto the CGRect region
[resultUIImage drawInRect:imageRect];
</code></pre>
]]></content>
  </entry>
  
</feed>
